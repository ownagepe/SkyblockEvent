<?php


namespace Zedstar16\SBEvent\tasks;


use pocketmine\nbt\BigEndianNBTStream;
use pocketmine\nbt\tag\CompoundTag;
use pocketmine\scheduler\AsyncTask;
use pocketmine\Server;

class AsyncIslandGeneratorTask extends AsyncTask
{
    /** @var String */
    public $data_path, $username;
    /** @var callable */
    public $callback;
    /** @var bool */
    public $result;

    public function __construct(string $data_path, string $username, ?callable $callback = null)
    {
        $this->data_path = $data_path;
        $this->username = $username;
        $this->callback = $callback;
        $this->result = true;
    }

    public function onRun()
    {
        $source_dir = $this->data_path;
        if (file_exists("worlds/$this->username") || !file_exists($source_dir)) {
            $this->result = false;
            return;
        }
        try {
            mkdir("worlds/$this->username");
            $dest_dir = "worlds/$this->username";
            copy($source_dir . "/level.dat", $dest_dir . "/level.dat");

            $levelDat_content = file_get_contents($dest_dir . "/level.dat");
            $nbt = new BigEndianNBTStream();
            $compressed = $nbt->readCompressed($levelDat_content);
            $level_data = $compressed->getCompoundTag("Data");
            $level_data->setString("LevelName", $this->username);
            file_put_contents($dest_dir . "/level.dat", $nbt->writeCompressed(new CompoundTag("", array($level_data))));

            mkdir($dest_dir . "/region");
            $iterator = new \DirectoryIterator($source_dir . "/region");
            foreach ($iterator as $iteration) {
                if (!$iterator->isDir()) {
                    copy($source_dir . "/region/" . $iteration->getFilename(), $dest_dir . "/region/" . $iteration->getFilename());
                }
            }
        } catch (\Throwable $error) {
            echo $error->getMessage() . " L" . $error->getLine() . PHP_EOL;
            $this->result = false;
            return;
        }
        $this->result = true;
    }

    public function onCompletion(Server $server)
    {
        $callback = $this->callback;
        if ($callback !== null) {
            $callback($this->result);
        }
        parent::onCompletion($server); // TODO: Change the autogenerated stub
    }

}